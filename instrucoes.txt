1. Criar o Ambiente Virtual

python3 -m venv venv
# Isso criar√° uma pasta chamada venv, onde todas as depend√™ncias do projeto ser√£o isoladas.

2. Ativar o Ambiente Virtual

No Linux/macOS:
source venv/bin/activate

No Windows (CMD ou PowerShell):
venv\Scripts\activate

3. Instalar Depend√™ncias
pip install streamlit sqlite3 pandas plotly

Caso queira salvar as depend√™ncias para instala√ß√£o futura em outro ambiente, use:
pip freeze > requirements.txt

Para reinstalar tudo em outro ambiente, basta rodar:
pip install -r requirements.txt

4. Testar se o Streamlit Funciona
streamlit hello

Para rodar seu c√≥digo do Streamlit com:
streamlit run main.py

Para conseguir ver o conte√∫do do banco de dados no VsCode:
Baixe a extens√£o SQlite Viewer

Clique com o bot√£o direito em orcamento.db e "Abrir com"
escolha SQlite Viewer e pronto


C√ìDIGO COMPLETO PARA BACKUP:
import streamlit as st
import sqlite3
import pandas as pd
import plotly.express as px

# Conectar ao banco de dados
conn = sqlite3.connect("orcamento.db")
cursor = conn.cursor()

# Criar tabelas se n√£o existirem
cursor.execute("""
CREATE TABLE IF NOT EXISTS receitas (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    origem TEXT NOT NULL,
    valor REAL NOT NULL,
    data TEXT NOT NULL
)
""")
cursor.execute("""
CREATE TABLE IF NOT EXISTS despesas (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    categoria TEXT NOT NULL,
    valor REAL NOT NULL,
    responsavel TEXT NOT NULL,
    data TEXT NOT NULL
)
""")
conn.commit()

# T√≠tulo principal
st.title("üí∞ Gerenciador de Or√ßamento Familiar")

### üì• Se√ß√£o para adicionar ou editar receitas
st.header("üì• Adicionar ou Editar Receita")

# Exibir receitas registradas para edi√ß√£o ou exclus√£o
cursor.execute("SELECT id, origem, valor, data FROM receitas")
receitas = cursor.fetchall()

# Se houver receitas registradas, mostrar para edi√ß√£o
if receitas:
    for receita in receitas:
        receita_info = f" > {receita[1]}"
        
        if st.checkbox(f"Editar | Excluir {receita_info}", key=f"checkbox_receita_{receita[0]}"):
            # Exibir dados para edi√ß√£o
            origem = st.text_input(f"Origem da Receita {receita_info}", value=receita[1], key=f"origem_{receita[0]}")
            valor_receita = st.number_input(f"Valor da Receita {receita_info}", min_value=0.01, format="%.2f", value=receita[2], key=f"valor_receita_{receita[0]}")
            data_receita = st.date_input(f"Data da Receita {receita_info}", value=pd.to_datetime(receita[3]), key=f"data_receita_{receita[0]}")

            # Atualizar receita
            if st.button(f"Atualizar Receita {receita_info}", key=f"atualizar_{receita[0]}"):
                cursor.execute("UPDATE receitas SET origem = ?, valor = ?, data = ? WHERE id = ?", 
                               (origem, valor_receita, data_receita, receita[0]))
                conn.commit()
                st.success(f"Receita {receita_info} Atualizada!")

            # Excluir receita
            if st.button(f"Excluir Receita {receita_info}", key=f"excluir_{receita[0]}"):
                cursor.execute("DELETE FROM receitas WHERE id = ?", (receita[0],))
                conn.commit()
                st.success(f"Receita {receita_info} Exclu√≠da!")
else:
    st.info("Nenhuma receita registrada ainda.")

# Se n√£o houver receitas, permitir a inser√ß√£o
st.subheader("Cadastrar Nova Receita")
origem = st.text_input("Origem da Receita")
valor_receita = st.number_input("Valor da Receita", min_value=0.01, format="%.2f")
data_receita = st.date_input("Data da Receita")
if st.button("Salvar Receita"):
    cursor.execute("INSERT INTO receitas (origem, valor, data) VALUES (?, ?, ?)", 
                   (origem, valor_receita, data_receita))
    conn.commit()
    st.success("Receita Adicionada!")

### üì§ Se√ß√£o para adicionar ou editar despesas
st.header("üì§ Adicionar ou Editar Despesa")

# Exibir despesas registradas para edi√ß√£o ou exclus√£o
cursor.execute("SELECT id, categoria, valor, responsavel, data FROM despesas")
despesas = cursor.fetchall()

# Se houver despesas registradas, mostrar para edi√ß√£o
if despesas:
    for despesa in despesas:
        despesa_info = f"{despesa[1]}"
        
        if st.checkbox(f"Editar ou Excluir {despesa_info}", key=f"checkbox_despesa_{despesa[0]}"):
            # Exibir dados para edi√ß√£o
            categoria = st.text_input(f"Categoria da Despesa {despesa_info}", value=despesa[1], key=f"categoria_{despesa[0]}")
            valor_despesa = st.number_input(f"Valor da Despesa {despesa_info}", min_value=0.01, format="%.2f", value=despesa[2], key=f"valor_despesa_{despesa[0]}")
            responsavel = st.selectbox(f"Respons√°vel pelo Pagamento {despesa_info}", ["Leo", "Vivian"], index=["L√©o", "Esposa"].index(despesa[3]), key=f"responsavel_{despesa[0]}")
            data_despesa = st.date_input(f"Data da Despesa {despesa_info}", value=pd.to_datetime(despesa[4]), key=f"data_despesa_{despesa[0]}")

            # Atualizar despesa
            if st.button(f"Atualizar Despesa {despesa_info}", key=f"atualizar_despesa_{despesa[0]}"):
                cursor.execute("UPDATE despesas SET categoria = ?, valor = ?, responsavel = ?, data = ? WHERE id = ?", 
                               (categoria, valor_despesa, responsavel, data_despesa, despesa[0]))
                conn.commit()
                st.success(f"Despesa {despesa_info} Atualizada!")

            # Excluir despesa
            if st.button(f"Excluir Despesa {despesa_info}", key=f"excluir_despesa_{despesa[0]}"):
                cursor.execute("DELETE FROM despesas WHERE id = ?", (despesa[0]))
                conn.commit()
                st.success(f"Despesa {despesa_info} Exclu√≠da!")
else:
    st.info("Nenhuma despesa registrada ainda.")

# Se n√£o houver despesas, permitir a inser√ß√£o
st.subheader("Cadastrar Nova Despesa")
categoria = st.text_input("Categoria da Despesa")
valor_despesa = st.number_input("Valor da Despesa", min_value=0.01, format="%.2f")
responsavel = st.selectbox("Respons√°vel pelo Pagamento", ["Leo", "Vivian"])
data_despesa = st.date_input("Data da Despesa")
if st.button("Salvar Despesa"):
    cursor.execute("INSERT INTO despesas (categoria, valor, responsavel, data) VALUES (?, ?, ?, ?)", 
                   (categoria, valor_despesa, responsavel, data_despesa))
    conn.commit()
    st.success("Despesa Adicionada!")

### üìä Exibir despesas registradas
st.header("üìä Despesas Registradas")

# Consultar dados do banco
cursor.execute("SELECT categoria, valor FROM despesas")
dados = cursor.fetchall()

if dados:
    df = pd.DataFrame(dados, columns=["Categoria", "Valor"])

    # Criar gr√°fico de pizza com Plotly
    fig = px.pie(df, names="Categoria", values="Valor", title="Distribui√ß√£o de Gastos")

    # Exibir tabela e gr√°fico
    st.write(df)
    st.plotly_chart(fig)
else:
    st.info("Nenhuma despesa registrada ainda.")

# Fechar conex√£o com o banco
conn.close()
